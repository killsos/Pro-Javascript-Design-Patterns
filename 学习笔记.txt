1.  Javascript弱类型
    三种原始类型: 布尔型  数值型  字符类型

    null undefined

    object

    symbol

2. 函数是一等对象

    函数可以存储在变量中

    作为参数传给函数

    作为返回值从函数反出来

3. 自执行匿名函数

    匿名函数常用来创建---闭包 closure

    闭包是一个受到保护的变量空间 由内嵌函数生成

    Javascript具有函数级作用域 这意味着定义在函数内部的变量在函数外部不能被访问

    Javascript的作用域又是词法性质的 这意味着函数运行在定义它的作用域 而不是在调用它的作用域中

    把这两个因素结合起来 就能通过把变量包裹在匿名函数中而对其加以保护中

4. 对象易变性

    对象易变性相关的还有---内省 introspection 的概念

    内省是指运行时检查对象所具有的属性和方法

    还可以使用这种信息动态实例化类和执行其方法---反射 reflection

5. 继承

    Javascript的继承是通过原型方式来实现

6. JS使用设计模式原因：

    1' 可维护性  降低模块间耦合度

    2' 沟通

    3' 性能

7. 接口

可重用面向对象设计第一条原则: 针对接口而不是实现编程


什么是接口？

接口提供一种用以说明一个类/对象应该具有哪些方法的手段


接口之利

促进代码的重用

告诉程序员一个类实现了哪些方法 从而帮助其使用这个类

接口有助于稳定不同的类之间的通信方式 如果事先知道了接口
你就能减少在集成两个对象的过程中出现问题

借助于接口 你可以事先说明你希望一个类具有那些特性和操作

一个程序员可以针对所需要的类定义一个接口
并把它转交给另一个程序员 第二个程序员可以随心所欲编写自己编码
只要他定义的类实现了那个接口就行
测试和调试可以更轻松

8. 在Javascript中模仿接口

三种方法: 注释法  属性检查法  鸭式辨型法

注释 04.js

属性检查 05.js

Interface类  06.js

9. 封装与信息隐藏

封装与信息隐藏是同一概念

信息隐藏是目的 封装是实现这个目的的技术

封装 encapsulation

一般通过关键字private
Javascript没有截至ES6没有private
只能通过闭包来实现

取值器  accessor
赋值器  mutator

取值器方法 通常以getAttributeName形式命名
赋值器方法 通常以setAttributeName形式命名

check检查
display显示

用命名规范区别私用成员
在私有属性和私有方法都是前面加一个下划线 _

10. 作用域 嵌套函数 闭包

在Javascript中 只有函数有函数作用域 也就是说  在一个函数内部声明的变量在函数外部无法访问
私有属性就其本质而言就是你希望在对象外部无法访问的变量
所以可以借助于函数作用域实现私有属性

定义在一个函数中的变量在该函数的内嵌函数是可以访问的
07.js

10. 用闭包实现私用成员
08.js

11. 静态方法和属性
静态成员是在类的层次上操作 而不是在实例的层次上操作
每个静态成员都只有一份 静态成员是直接通过类对象访问的
09.js



12. 继承
好处:  减少重复性代码  尽量弱化对象间的耦合
一个类继承另一个类可能会导致二者产生强耦合 也即一个类依赖于另一个类的内部实现
10.js

1' 类式继承   按照惯例 类名 首字母大写

2' 原型链

----------------------------------

1 单体模式

singleton 单例模式

提供了一种将代码组织为了一个逻辑单元的手段
这个逻辑单元中的代码可以通过单一的变量进行访问

通过确保单体对象只存在一份的实例
就可以确信自己的所有diamante使用都是同样的全局资源

实现方式: 命名空间  使用闭包


惰性实例化
实例化推迟到需要使用它的时候---惰性加载 Lazy loading

最常用于那些必须加载大量数据的单体

惰性加载单体特别之处在于: 对它们的访问必须借助于一个镜头方法

应该这样调用方法: Singleton.getInstance().methodName()

getInstance方法检查该单体是否已经被实例化 如果还没有 那就实例化 如果有实例化 那就返回现有实例
11.js


分支 branching 是一种用来把浏览器间的差异封装到在运行期间进行设置的动态方法中的技术

例子：Ajax ? XMLHttpRequest : ActiveX
------------------------------------------------------------------------------------------------------


2 方法的链式调用

return this;
------------------------------------------------------------------------------------------------------


3 工厂模式
factory

12.js






适配器模式
可用来在现有接口和不兼容的类之间进行适配
使用这种模式的对象也叫包装器 wrapper

因为它们是在用一个新的接口包装另一个对象

特点：
在现有的代码中以协调两个不同的接口
通过适配器提供option-rich接口

