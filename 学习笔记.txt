1.  Javascript弱类型
    三种原始类型: 布尔型  数值型  字符类型

    null undefined

    object

    symbol

2. 函数是一等对象

    函数可以存储在变量中

    作为参数传给函数

    作为返回值从函数反出来

3. 自执行匿名函数

    匿名函数常用来创建---闭包 closure

    闭包是一个受到保护的变量空间 由内嵌函数生成

    Javascript具有函数级作用域 这意味着定义在函数内部的变量在函数外部不能被访问

    Javascript的作用域又是词法性质的 这意味着函数运行在定义它的作用域 而不是在调用它的作用域中

    把这两个因素结合起来 就能通过把变量包裹在匿名函数中而对其加以保护中

4. 对象易变性

    对象易变性相关的还有---内省 introspection 的概念

    内省是指运行时检查对象所具有的属性和方法

    还可以使用这种信息动态实例化类和执行其方法---反射 reflection

5. 继承

    Javascript的继承是通过原型方式来实现

6. JS使用设计模式原因：

    1' 可维护性  降低模块间耦合度

    2' 沟通

    3' 性能

7. 接口

可重用面向对象设计第一条原则: 针对接口而不是实现编程


什么是接口？

接口提供一种用以说明一个类/对象应该具有哪些方法的手段


接口之利

促进代码的重用

告诉程序员一个类实现了哪些方法 从而帮助其使用这个类

接口有助于稳定不同的类之间的通信方式 如果事先知道了接口
你就能减少在集成两个对象的过程中出现问题

借助于接口 你可以事先说明你希望一个类具有那些特性和操作

一个程序员可以针对所需要的类定义一个接口
并把它转交给另一个程序员 第二个程序员可以随心所欲编写自己编码
只要他定义的类实现了那个接口就行
测试和调试可以更轻松

8. 在Javascript中模仿接口

三种方法: 注释法  属性检查法  鸭式辨型法

注释 04.js

属性检查 05.js

Interface类  06.js

9. 封装与信息隐藏

封装与信息隐藏是同一概念

信息隐藏是目的 封装是实现这个目的的技术

封装 encapsulation

一般通过关键字private
Javascript没有截至ES6没有private
只能通过闭包来实现

取值器  accessor
赋值器  mutator

取值器方法 通常以getAttributeName形式命名
赋值器方法 通常以setAttributeName形式命名

check检查
display显示

用命名规范区别私用成员
在私有属性和私有方法都是前面加一个下划线 _

10. 作用域 嵌套函数 闭包



